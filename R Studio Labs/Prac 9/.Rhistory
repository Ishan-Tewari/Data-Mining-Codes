library(datasets)
data(iris)
summary(iris)
library(rpart)
library(rpart.plot)
v = iris['Species']
table(v)
set.seed(522)
# runif function returns a uniform distribution which can be further conditionally split into 75-25 ratio
iris[, 'train'] = ifelse(runif(nrow(iris)) < 0.75, 1, 0)
# Dividing the data into training and testing set
trainSet = iris[iris['train'] == 1,]
testSet = iris[iris['train'] == 0, ]
trainColNum = grep('train', names(trainSet))
trainSet = trainSet[, -trainColNum]
testSet = testSet[, -trainColNum]
print(trainSet)
print(testSet)
treeFit = rpart(Species~.,data=trainSet,method = 'class')
print(treeFit)
rpart.plot(treeFit, box.col=c("lightslateblue", "mediumorchid1"))
Prediction1 = predict(treeFit,newdata=testSet[-5],type = 'class')
print(Prediction1)
library(caret)
confusionMatrix(Prediction1,testSet$Species)
library(caret)
confusionMatrix(Prediction1,testSet$Species)
install.packages('caret',dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
confusionMatrix(Prediction1,testSet$Species)
library(caret)
confusionMatrix(Prediction1,testSet$Species)
library(datasets)
data(iris)
summary(iris)
library(datasets)
data(iris)
summary(iris)
library(rpart)
library(rpart.plot)
v = iris['Species']
table(v)
set.seed(522)
# runif function returns a uniform distribution which can be further conditionally split into 75-25 ratio
iris[, 'train'] = ifelse(runif(nrow(iris)) < 0.75, 1, 0)
# Dividing the data into training and testing set
trainSet = iris[iris['train'] == 1,]
testSet = iris[iris['train'] == 0, ]
trainColNum = grep('train', names(trainSet))
trainSet = trainSet[, -trainColNum]
testSet = testSet[, -trainColNum]
print(trainSet)
print(testSet)
treeFit = rpart(Species~.,data=trainSet,method = 'class')
print(treeFit)
rpart.plot(treeFit, box.col=c("lightslateblue", "mediumorchid1"))
Prediction1 = predict(treeFit,newdata=testSet[-5],type = 'class')
print(Prediction1)
library(caret)
confusionMatrix(Prediction1,testSet$Species)
library(datasets)
data(iris)X
library(datasets)
data(iris)
summary(iris)
library(e1071)
library('caTools')
split=sample.split(iris$Species,SplitRatio = 0.7)
train_data=subset(iris,split==T)
test_data=subset(iris,split==F)
classifier<-naiveBayes(Species~., data=train_data)
table(predict(classifier, test_data), test_data$Species, dnn=list('predicted', 'actual'))
library(e1071)
library('caTools')
split = sample.split(iris$Species,SplitRatio = 0.7)
train_data = subset(iris,split==T)
test_data = subset(iris,split==F)
classifier = naiveBayes(Species~., data=train_data)
table(predict(classifier, test_data), test_data$Species, dnn=list('predicted', 'actual'))
classifier$tables$Petal.Length
library(caret)
confusionMatrix(predict(classifier, test_data), test_data$Species)
x = c(5,2,1,4)
y = rep(1,5)
print(x)
print(y)
x = c(5,2,1,4)
y = rep(1,5)
print(x)
print(y)
print(sum(x))
print(range(x))
print(length(y))
print(sum(y))
print(c(x,y,13))
print(x[4] * y[2])
print(x[2:4] * y[1:3])
print(x <= 2)
print(x[x <= 2])
print(rep(1:4,2))
print(rep(1:4,each=2))
print(rep(1:4,c(2,2,2,2)))
print(rep(1:4,c(2,2,2,1)))
print(rep(1:4,each=2,len=10))
print(2:3^2)
print(seq(2,-3) * c(-1,1))
x = c(5,2,1,4)
y = rep(1,5)
print(x)
print(y)
print(sum(x))
print(range(x))
print(length(y))
print(sum(y))
print(c(x,y,13))
print(x[4] * y[2])
print(x[2:4] * y[1:3])
print(x <= 2)
print(x[x <= 2])
print(rep(1:4,2))
print(rep(1:4,each=2))
print(rep(1:4,c(2,2,2,2)))
print(rep(1:4,c(2,2,2,1)))
print(rep(1:4,each=2,len=10))
print(2:3^2)
print(seq(2,-3) * c(-1,1))
a = LETTERS[1:3]
print(a)
print(paste('V',a,sep=":"))
print(nchar(paste(a,collapse = '<')))
u = c(TRUE,FALSE,TRUE,TRUE)
print(!u)
print(u | !u)
print(any(u))
x = seq(10,0)
print(x)
y = seq(1,10) ^ 2
y = rep(y,each=3)
print(y)
z = letters[1:16]
print(z)
q = seq(1,16)
print(q)
p = paste(z,q,sep='')
print(p)
x = seq(5.5,15,0.5)
print(x)
m1 = matrix(x,2,10,byrow = TRUE)
print(m1)
m2 = t(m1)
print(m2)
print(m1 %*% m2)
x = c(5,2,1,4)
y = rep(1,5)
print(x)
print(y)
x = c(5,2,1,4)
y = rep(1,5)
print(x)
print(y)
print(sum(x))
print(range(x))
print(length(y))
print(sum(y))
print(c(x,y,13))
print(x[4] * y[2])
print(x[2:4] * y[1:3])
print(x <= 2)
print(x[x <= 2])
print(rep(1:4,2))
print(rep(1:4,each=2))
print(rep(1:4,c(2,2,2,2)))
print(rep(1:4,c(2,2,2,1)))
print(rep(1:4,each=2,len=10))
print(2:3^2)
print(seq(2,-3) * c(-1,1))
a = LETTERS[1:3]
print(a)
print(paste('V',a,sep=":"))
print(nchar(paste(a,collapse = '<')))
u = c(TRUE,FALSE,TRUE,TRUE)
print(!u)
print(u | !u)
print(any(u))
x = seq(10,0)
print(x)
y = seq(1,10) ^ 2
y = rep(y,each=3)
print(y)
z = letters[1:16]
print(z)
q = seq(1,16)
print(q)
p = paste(z,q,sep='')
print(p)
x = seq(5.5,15,0.5)
print(x)
m1 = matrix(x,2,10,byrow = TRUE)
print(m1)
m2 = t(m1)
print(m2)
print(m1 %*% m2)
x = c(5,2,1,4)
y = rep(1,5)
print(x)
print(y)
print(sum(x))
print(range(x))
print(length(y))
print(sum(y))
print(c(x,y,13))
print(x[4] * y[2])
print(x[2:4] * y[1:3])
print(x <= 2)
print(x[x <= 2])
print(rep(1:4,2))
print(rep(1:4,each=2))
print(rep(1:4,c(2,2,2,2)))
print(rep(1:4,c(2,2,2,1)))
print(rep(1:4,each=2,len=10))
print(2:3^2)
print(seq(2,-3) * c(-1,1))
a = LETTERS[1:3]
print(a)
print(paste('V',a,sep=":"))
print(nchar(paste(a,collapse = '<')))
u = c(TRUE,FALSE,TRUE,TRUE)
print(!u)
print(u | !u)
print(any(u))
x = seq(10,0)
print(x)
y = seq(1,10) ^ 2
y = rep(y,each=3)
print(y)
z = letters[1:16]
print(z)
q = seq(1,16)
print(q)
p = paste(z,q,sep='')
print(p)
x = seq(5.5,15,0.5)
print(x)
m1 = matrix(x,2,10,byrow = TRUE)
print(m1)
m2 = t(m1)
print(m2)
print(m1 %*% m2)
